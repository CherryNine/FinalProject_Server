generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER    @map("user")
  ADMIN   @map("admin")
}

enum Status {
  UNBLOCKED  @map("unblocked")
  BLOCKED    @map("blocked")
}

enum QuestionType {
  SINGLE_LINE  @map("single_line")
  MULTI_LINE   @map("multi_line")
  INTEGER      @map("integer")
  CHECKBOX     @map("checkbox")
}

model User {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  password     String
  first_name   String
  last_name    String
  role         Role      @default(USER)
  status       Status    @default(UNBLOCKED)
  refreshToken String?

  templates    Template[] @relation("TemplateOwner")
  forms        Form[]     @relation("FormOwner")
  comments     Comment[]  @relation("CommentAuthor")
  likes        Like[]     @relation("UserLikes") 

  @@index([id])
  @@index([email])
}

model Template {
  id                    String         @id @default(uuid())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  title                 String
  description           String?
  theme                 String
  isPublic              Boolean        @default(false)
  owner                 User           @relation("TemplateOwner", fields: [ownerId], references: [id])
  ownerId               String

  singleLineQuestions    SingleLineQuestion[]
  multiLineQuestions     MultiLineQuestion[]
  integerQuestions       IntegerQuestion[]
  checkboxQuestions      CheckboxQuestion[]
  forms                  Form[]
  comments               Comment[]
  likes                  Like[]         @relation("TemplateLikes") 

  tags                  Tag[]          @relation("TemplateTags")

  @@index([title])
  @@index([description])
}

model SingleLineQuestion {
  id          String   @id @default(uuid())
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  questionText String
  isVisible   Boolean   @default(true)
  order       Int       @default(0)
}

model MultiLineQuestion {
  id          String   @id @default(uuid())
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  questionText String
  isVisible   Boolean   @default(true)
  order       Int       @default(0)
}

model IntegerQuestion {
  id          String   @id @default(uuid())
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  questionText String
  isVisible   Boolean   @default(true)
  order       Int       @default(0)
}

model CheckboxQuestion {
  id          String   @id @default(uuid())
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  questionText String
  isVisible   Boolean   @default(true)
  order       Int       @default(0)
}

model Form {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  template    Template  @relation(fields: [templateId], references: [id])
  templateId  String
  author      User      @relation("FormOwner", fields: [authorId], references: [id])
  authorId    String

  answers     Answer[]  
}

model Answer {
  id            String   @id @default(uuid())
  form          Form     @relation(fields: [formId], references: [id])
  formId        String
  singleLineAnswers  String[]
  multiLineAnswers   String[] 
  integerAnswers     Int[]    
  checkboxAnswers    Boolean[] 
}

model Comment {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  text        String
  author      User      @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId    String
  template    Template   @relation(fields: [templateId], references: [id])
  templateId  String
}

model Like {
  id          String   @id @default(uuid())
  user        User     @relation("UserLikes", fields: [userId], references: [id])
  userId      String
  template    Template  @relation("TemplateLikes", fields: [templateId], references: [id])
  templateId  String

  @@unique([userId, templateId]) 
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  templates Template[] @relation("TemplateTags")
}
